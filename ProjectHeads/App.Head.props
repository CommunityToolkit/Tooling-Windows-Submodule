<!-- Common props for any deployable app project head. -->
<Project>
  <Import Project="$(MSBuildThisFileDirectory)\..\MultiTarget\Extra.props" />
  <Import Project="$(ToolingDirectory)\MultiTarget\GlobalUsings.props" />

  <!-- Shared project -->
  <Import Project="$(ToolingDirectory)\CommunityToolkit.App.Shared\CommunityToolkit.App.Shared.projitems" Label="Shared" />

  <!-- Gather sample docs from all components -->
  <Import Project="$(ToolingDirectory)\ProjectHeads\Targets\AddMultiTargetCompatibleSampleDocs.targets" />

  <!-- Shared project dependencies -->
  <ItemGroup>
    <PackageReference Include="Newtonsoft.Json" Version="13.0.3" />
  </ItemGroup>

  <!-- Source generators -->
  <ItemGroup Condition="'$(IsWinAppSdk)' != 'true'">
    <PackageReference Include="Microsoft.CodeAnalysis.CSharp" Version="4.11.0" PrivateAssets="all" />
    <PackageReference Include="Microsoft.CodeAnalysis.Analyzers" Version="3.11.0" PrivateAssets="all" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="$(ToolingDirectory)\CommunityToolkit.Tooling.SampleGen\CommunityToolkit.Tooling.SampleGen.csproj" OutputItemType="Analyzer" ReferenceOutputAssembly="true" />
  </ItemGroup>

  <PropertyGroup>
    <SlnGenIsDeployable>true</SlnGenIsDeployable>
  </PropertyGroup>

  <!-- Sample App Toolkit Dependencies -->
  <Choose>
    <When Condition="'$(ToolkitConvertersSourceProject)' == ''">
      <ItemGroup>
        <PackageReference Include="CommunityToolkit.$(DependencyVariant).Converters" Version="8.2.250129-preview2"/>
      </ItemGroup>
    </When>
    <!-- This is tripping up the linux build using dotnet build as we have a duplicate reference 
        auto-generated in tooling/MultiTarget/Generated when building the all-up sample app -->
    <!-- See: https://github.com/dotnet/msbuild/issues/2688 -->
    <!-- TODO: We need to handle a case where a component itself references the converter package... -->
    <!-- Only add Converters reference if we're in a single experiment that's not the Converters project itself -->
    <When Condition="'$(IsSingleExperimentHead)' == 'true' and $(MSBuildProjectName.StartsWith('Converters')) == 'false'">
      <ItemGroup>
        <ProjectReference Include="$(ToolkitConvertersSourceProject)"/>
      </ItemGroup>
    </When>
  </Choose>
  <Choose>
    <When Condition="'$(ToolkitSettingsControlsSourceProject)' == ''">
      <ItemGroup>
        <PackageReference Include="CommunityToolkit.$(DependencyVariant).Controls.SettingsControls" Version="8.2.250129-preview2"/>
      </ItemGroup>
    </When>
    <When Condition="'$(IsSingleExperimentHead)' == 'true' and $(MSBuildProjectName.StartsWith('SettingsControls')) == 'false'">
      <ItemGroup>
        <ProjectReference Include="$(ToolkitSettingsControlsSourceProject)"/>
      </ItemGroup>
    </When>
  </Choose>
  <Choose>
    <When Condition="'$(ToolkitExtensionsSourceProject)' == ''">
      <ItemGroup>
        <PackageReference Include="CommunityToolkit.$(DependencyVariant).Extensions" Version="8.2.250129-preview2"/>
      </ItemGroup>
    </When>
    <When Condition="'$(IsSingleExperimentHead)' == 'true' and $(MSBuildProjectName.StartsWith('Extensions')) == 'false'">
      <ItemGroup>
        <ProjectReference Include="$(ToolkitExtensionsSourceProject)"/>
      </ItemGroup>
    </When>
  </Choose>
  <Choose>
    <When Condition="'$(ToolkitTriggersSourceProject)' == ''">
      <ItemGroup>
        <PackageReference Include="CommunityToolkit.$(DependencyVariant).Triggers" Version="8.2.250129-preview2"/>
      </ItemGroup>
    </When>
    <When Condition="'$(IsSingleExperimentHead)' == 'true' and $(MSBuildProjectName.StartsWith('Triggers')) == 'false'">
      <ItemGroup>
        <ProjectReference Include="$(ToolkitTriggersSourceProject)"/>
      </ItemGroup>
    </When>
  </Choose>

  <!-- Content inclusion -->
  <!-- See https://github.com/CommunityToolkit/Labs-Windows/issues/142 -->
  <ItemGroup Condition="'$(IsAllExperimentHead)' == 'true'">
    <!-- These are also included in the Samples props file, but added here to workaround https://github.com/unoplatform/uno/issues/2502 -->
    <Content Include="$(RepositoryDirectory)components\**\samples\**\*.md" Exclude="$(RepositoryDirectory)**\**\samples\obj\**\*.md;$(RepositoryDirectory)**\**\samples\bin\**\*.md;$(RepositoryDirectory)**\SourceAssets\**\*.md">
      <Link>SourceAssets/%(RecursiveDir)%(FileName)%(Extension)</Link>
    </Content>

    <Content Include="$(RepositoryDirectory)components\**\samples\**\*.xaml" Exclude="$(RepositoryDirectory)**\**\samples\obj\**\*.xaml;$(RepositoryDirectory)**\**\samples\bin\**\*.xaml;$(RepositoryDirectory)**\SourceAssets\**\*.xaml">
      <Link>SourceAssets/%(RecursiveDir)%(FileName)%(Extension)</Link>
    </Content>

    <!-- Link/.dat is a workaround for https://github.com/unoplatform/uno/issues/8649 -->
    <Content Include="$(RepositoryDirectory)components\**\samples\**\*.cs" Exclude="$(RepositoryDirectory)**\**\samples\obj\**\*.cs;$(RepositoryDirectory)**\**\samples\bin\**\*.cs">
      <Link>SourceAssets/%(RecursiveDir)%(FileName)%(Extension).dat</Link>
    </Content>

    <AdditionalFiles Include="$(RepositoryDirectory)components\**\src\**\*.csproj" />
  </ItemGroup>

  <!-- See https://github.com/CommunityToolkit/Labs-Windows/issues/142 -->
  <ItemGroup Condition="'$(IsSingleExperimentHead)' == 'true' or '$(IsProjectTemplateHead)' == 'true'">
    <!-- These are also included in the Samples props file, but added here to workaround https://github.com/unoplatform/uno/issues/2502 -->
    <Content Include="$(MSBuildProjectDirectory)\..\..\samples\**\*.md" Exclude="$(MSBuildProjectDirectory)\..\..\samples\obj\**\*.md;$(MSBuildProjectDirectory)\..\..\samples\bin\**\*.md;$(MSBuildProjectDirectory)\..\..\**\SourceAssets\**\*.md" Link="SourceAssets/%(RecursiveDir)%(FileName)%(Extension)"/>
    <Content Include="$(MSBuildProjectDirectory)\..\..\samples\**\*.xaml" Exclude="$(MSBuildProjectDirectory)\..\..\samples\obj\**\*.xaml;$(MSBuildProjectDirectory)\..\..\samples\bin\**\*.xaml;$(MSBuildProjectDirectory)\..\..\**\SourceAssets\**\*.xaml" Link="SourceAssets/%(RecursiveDir)%(FileName)%(Extension)"/>

    <!-- Link/.dat is a workaround for https://github.com/unoplatform/uno/issues/8649 -->
    <Content Include="$(MSBuildProjectDirectory)\..\..\samples\**\*.cs" Exclude="$(MSBuildProjectDirectory)\..\..\samples\obj\**\*.cs;$(MSBuildProjectDirectory)\..\..\samples\bin\**\*.cs">
      <Link>SourceAssets/%(RecursiveDir)%(FileName)%(Extension).dat</Link>
    </Content>

    <!-- Include markdown files from all samples so the head can access them in the source generator -->
    <AdditionalFiles Include="$(MSBuildProjectDirectory)\..\..\samples\*.md" Exclude="$(MSBuildProjectDirectory)\..\..\**\obj\**\*.md;$(MSBuildProjectDirectory)\..\..\**\bin\**\*.md"/>
    <AdditionalFiles Include="$(MSBuildProjectDirectory)\..\..\src\**\*.csproj" />
  </ItemGroup>

  <PropertyGroup>
    <!-- Turn-off .NET based AssemblyInfo.cs generator, see below -->
    <GenerateAssemblyInfo>false</GenerateAssemblyInfo>
  </PropertyGroup>

  <!-- https://stackoverflow.com/questions/10980249/msbuild-task-for-setting-custom-attribute-in-assemblyinfo-cs -->
  <!-- https://gist.github.com/KirillOsenkov/f20cb84d37a89b01db63f8aafe03f19b -->
  <Target Name="AddAssemblyAttributes" BeforeTargets="BeforeCompile">
    <PropertyGroup>
      <GeneratedAssemblyInfoPath>$(IntermediateOutputPath)AssemblyInfo.g.cs</GeneratedAssemblyInfoPath>
    </PropertyGroup>

    <ItemGroup>
      <!-- Add our own AssemblyInfo.cs standard attributes -->
      <AssemblyAttributes Include="AssemblyTitle">
        <_Parameter1>$(Product)</_Parameter1>
      </AssemblyAttributes>
      <AssemblyAttributes Include="AssemblyDescription">
        <_Parameter1>Community Toolkit</_Parameter1>
      </AssemblyAttributes>
      <AssemblyAttributes Include="AssemblyCompany">
        <_Parameter1>$(Company)</_Parameter1>
      </AssemblyAttributes>
      <AssemblyAttributes Include="AssemblyProduct">
        <_Parameter1>$(Product)</_Parameter1>
      </AssemblyAttributes>
      <AssemblyAttributes Include="AssemblyCopyright">
        <_Parameter1>$(Copyright)</_Parameter1>
      </AssemblyAttributes>
      <AssemblyAttributes Include="AssemblyTrademark">
        <_Parameter1></_Parameter1>
      </AssemblyAttributes>
      <AssemblyAttributes Include="AssemblyCulture">
        <_Parameter1></_Parameter1>
      </AssemblyAttributes>
      <AssemblyAttributes Include="AssemblyConfiguration">
        <_Parameter1>$(Configuration)</_Parameter1>
      </AssemblyAttributes>
      <AssemblyAttributes Include="AssemblyVersion">
        <_Parameter1>1.0.0.0</_Parameter1>
      </AssemblyAttributes>
      <AssemblyAttributes Include="AssemblyFileVersion">
        <_Parameter1>1.0.0.0</_Parameter1>
      </AssemblyAttributes>
      <AssemblyAttributes Include="System.Runtime.InteropServices.ComVisible">
        <_Parameter1>false</_Parameter1>
        <_Parameter1_TypeName>System.Boolean</_Parameter1_TypeName>
      </AssemblyAttributes>

      <!-- Add custom attributes, also see https://stackoverflow.com/questions/56835671/how-to-read-a-msbuild-property-in-a-given-project-in-runtime -->
      <AssemblyAttributes Include="System.Reflection.AssemblyMetadataAttribute" Condition="'$(SourceRevisionId)' != ''">
        <_Parameter1>CommitHash</_Parameter1>
        <_Parameter2>$(SourceRevisionId)</_Parameter2>
      </AssemblyAttributes>
      <AssemblyAttributes Include="CommunityToolkit.Attributes.PackageProjectUrlAttribute" Condition="'$(PackageProjectUrl)' != ''">
        <_Parameter1>$(PackageProjectUrl)</_Parameter1>
      </AssemblyAttributes>
      <Warning Text="The PackageProjectUrl property was not set." Condition="'$(PackageProjectUrl)' == ''" />
    </ItemGroup>

    <!-- Extra attributes specific to platforms -->
    <ItemGroup Condition="'$(IsWinAppSdk)' == 'true'">
      <AssemblyAttributes Include="System.Runtime.Versioning.TargetPlatformAttribute">
        <_Parameter1>Windows10.0.19041.0</_Parameter1>        <!-- TODO: Grab from variable -->
      </AssemblyAttributes>
      <AssemblyAttributes Include="System.Runtime.Versioning.SupportedOSPlatformAttribute">
        <_Parameter1>Windows10.0.17763.0</_Parameter1>        <!-- TODO: Grab from variable -->
      </AssemblyAttributes>
    </ItemGroup>

    <ItemGroup>
      <Compile Include="$(GeneratedAssemblyInfoPath)" />
    </ItemGroup>

    <!-- Write out new auto-generated AssemblyInfo.g.cs file -->
    <WriteCodeFragment Language="C#" OutputFile="$(GeneratedAssemblyInfoPath)" AssemblyAttributes="@(AssemblyAttributes)" />
  </Target>
</Project>
